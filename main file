DROP TABLE EMPLOYEE_PAY;
DROP TABLE INSURANCE;
DROP TABLE SCHEDULE;
DROP TABLE EMPLOYEE;
DROP TABLE OPERATION_TRANSACTION;
DROP TABLE SUPPLY;
DROP TABLE ANNUAL_BUDGET;
DROP TABLE DEPARTMENT;
DROP TABLE CUSTOMER;
DROP TABLE PERSON;
DROP TABLE ORDER_PRODUCT;
DROP TABLE ORDERS;
DROP TABLE PRODUCT;
DROP TABLE VENDOR;
DROP TABLE WAREHOUSE_PRODUCT;
DROP TABLE WAREHOUSE_COST;
DROP TABLE WAREHOUSE;
DROP TABLE ITEM;
DROP TABLE ITEM_TYPE;
CREATE TABLE PERSON(
user_ID Number GENERATED ALWAYS AS IDENTITY,
lastname VARCHAR2(50) NOT NULL,
firstname VARCHAR2(50) NOT NULL,
CONSTRAINT pk_user_ID PRIMARY KEY(user_ID)
);
CREATE TABLE DEPARTMENT(
department_ID Number GENERATED ALWAYS AS IDENTITY,
department_Name VARCHAR2(50) NOT NULL,
description VARCHAR2(300) NOT NULL,
department_Head VARCHAR2(50) NOT NULL,
CONSTRAINT pk_department_ID PRIMARY KEY(department_ID)
);
CREATE TABLE EMPLOYEE(
employee_ID Number GENERATED ALWAYS AS IDENTITY,
user_ID Number NOT NULL,
department_ID Number NOT NULL,
CONSTRAINT pk_employee_ID PRIMARY KEY(employee_ID),
CONSTRAINT fk_department_ID_EMP FOREIGN KEY(department_ID)
REFERENCES ADMIN.DEPARTMENT(department_ID),
CONSTRAINT fk_user_ID_EMP FOREIGN KEY(user_ID) REFERENCES
ADMIN.PERSON(user_ID)
);
CREATE TABLE CUSTOMER(
cust_ID number GENERATED ALWAYS AS IDENTITY,
user_ID number NOT NULL,
CONSTRAINT pk_cust_ID PRIMARY KEY(cust_ID),
CONSTRAINT fk_user_ID_CUST FOREIGN KEY(user_ID) REFERENCES
ADMIN.PERSON(user_ID)
);
CREATE TABLE ORDERS(
order_ID number GENERATED ALWAYS AS IDENTITY,

order_Date date NOT NULL,
tracking_ID number NOT NULL,
cust_ID number NOT NULL,
CONSTRAINT pk_order_ID PRIMARY KEY(order_ID),
CONSTRAINT fk_cust_ID_ORDR FOREIGN KEY(cust_ID) REFERENCES
ADMIN.ORDERS(cust_ID)
);
CREATE TABLE ORDER_PRODUCT(
order_Product_ID number GENERATED ALWAYS AS IDENTITY,
order_ID number NOT NULL,
quantity number NOT NULL,
product_ID number NOT NULL,
CONSTRAINT pk_order_Product_ID PRIMARY KEY(order_Product_ID),
CONSTRAINT fk_order_ID_ORDR_PROD FOREIGN KEY(order_ID) REFERENCES
ADMIN.ORDERS(order_ID),
CONSTRAINT fk_product_ID_ORDR_PROD FOREIGN KEY(product_ID)
REFERENCES ADMIN.product(product_ID)
);
CREATE TABLE WAREHOUSE(
warehouse_ID number GENERATED ALWAYS AS IDENTITY,
location VARCHAR2(50) NOT NULL,
CONSTRAINT pk_warehouse_ID PRIMARY KEY(warehouse_ID)
);

CREATE TABLE WAREHOUSE_PRODUCT(
warehouse_Product_ID number GENERATED ALWAYS AS IDENTITY,
warehouse_ID number NOT NULL,
quantity number NOT NULL,
CONSTRAINT pk_warehouse_Product_ID PRIMARY KEY(warehouse_Product_ID),
CONSTRAINT fk_warehouse_ID_WRHS_PROD FOREIGN KEY(warehouse_ID)
REFERENCES ADMIN.WAREHOUSE(warehouse_ID)
);
CREATE TABLE VENDOR(
vendor_ID number GENERATED ALWAYS AS IDENTITY,
vendor_Name VARCHAR2 (50) NOT NULL,
CONSTRAINT pk_vendor_ID PRIMARY KEY(vendor_ID)
);

CREATE TABLE PRODUCT (
product_ID number GENERATED ALWAYS AS IDENTITY,
product_Name VARCHAR2 (50) NOT NULL,
product_Description VARCHAR2 (50) DEFAULT '',
price_Per_Unit decimal NOT NULL,
vendor_ID number NOT NULL,
vendor_Price decimal NOT NULL,
warehouse_Product_ID number NOT NULL,
CONSTRAINT pk_product_ID PRIMARY KEY(product_ID),
CONSTRAINT fk_vendor_ID_PROD FOREIGN KEY(vendor_ID) REFERENCES
ADMIN.VENDOR(vendor_ID),
CONSTRAINT fk_warehouse_Product_ID_PROD FOREIGN
KEY(warehouse_Product_ID) REFERENCES
ADMIN.WAREHOUSE_PRODUCT(warehouse_Product_ID)

);
CREATE TABLE ITEM_TYPE(
item_Type_ID NUMBER GENERATED ALWAYS AS IDENTITY,
item_Type_Name VARCHAR2(50) NOT NULL,
CONSTRAINT pk_item_Type_ID PRIMARY KEY(item_Type_ID)
);
CREATE TABLE ITEM(
item_ID NUMBER GENERATED ALWAYS AS IDENTITY,
item_Type_ID number NOT NULL,
item_Name VARCHAR2(50) NOT NULL,
item_Description VARCHAR2(100) default '',
CONSTRAINT pk_item_ID PRIMARY KEY(item_ID),
CONSTRAINT fk_item_Type_ID_ITM FOREIGN KEY(item_Type_ID) REFERENCES
ADMIN.ITEM_TYPE(item_Type_ID)
);
CREATE TABLE WAREHOUSE_COST(
warehouse_Cost_ID number GENERATED ALWAYS AS IDENTITY,
warehouse_ID number NOT NULL,
cost decimal NOT NULL,
day_Placed date NOT NULL,
item_ID number NOT NULL,
CONSTRAINT pk_warehouse_Cost_ID PRIMARY KEY(warehouse_Cost_ID),
CONSTRAINT fk_warehouse_ID_WRHS_CST FOREIGN KEY(warehouse_ID)
REFERENCES ADMIN.WAREHOUSE(warehouse_ID),
CONSTRAINT fk_item_ID_WRHS_CST FOREIGN KEY(item_ID) REFERENCES
ADMIN.ITEM(item_ID)
);
CREATE TABLE OPERATION_TRANSACTION(
operation_Transaction_ID number GENERATED ALWAYS AS IDENTITY,
description VARCHAR2 (50) DEFAULT '',
department_ID number NOT NULL,
item_ID number NOT NULL,
cost decimal(8,2),
CONSTRAINT pk_operation_Transaction_ID PRIMARY
KEY(operation_Transaction_ID),
CONSTRAINT fk_department_ID_OP_TRNS FOREIGN KEY(department_ID)
REFERENCES ADMIN.DEPARTMENT(department_ID),
CONSTRAINT fk_item_ID_OP_TRNSC FOREIGN KEY(item_ID) REFERENCES
ADMIN.ITEM(item_ID)
);
CREATE TABLE EMPLOYEE_PAY(
employee_ID number NOT NULL,
hourly_Pay_Rate number NOT NULL,
CONSTRAINT fk_employee_ID_EMP_PAY FOREIGN KEY(employee_ID)
REFERENCES ADMIN.EMPLOYEE(employee_ID)
);
CREATE TABLE INSURANCE(
insurance_ID number GENERATED ALWAYS AS IDENTITY,
employee_ID number NOT NULL,
insurance_Name VARCHAR2(50) NOT NULL,
insurance_Description VARCHAR2(200) DEFAULT '',

CONSTRAINT pk_insurance_ID PRIMARY KEY(insurance_ID),
CONSTRAINT fk_employee_ID_INSR FOREIGN KEY(employee_ID) REFERENCES
ADMIN.EMPLOYEE(employee_ID)
);
CREATE TABLE SCHEDULE(
employee_ID number NOT NULL,
day_Worked date NOT NULL,
start_Time timestamp NOT NULL,
end_Time timestamp NOT NULL,
CONSTRAINT fk_employee_ID_SCH FOREIGN KEY(employee_ID) REFERENCES
ADMIN.EMPLOYEE(employee_ID)
);
CREATE TABLE SUPPLY(
supply_ID NUMBER GENERATED ALWAYS AS IDENTITY,
supply_Type VARCHAR(50) NOT NULL,
department_ID number NOT NULL,
supply_Name VARCHAR2 (50) NOT NULL,
quantity number NOT NULL,
price_Per_Unit decimal(8,2) NOT NULL,
CONSTRAINT pk_supply_ID PRIMARY KEY(supply_ID),
CONSTRAINT fk_department_ID_SPLY FOREIGN KEY(department_ID)
REFERENCES ADMIN.DEPARTMENT(department_ID)
);

CREATE TABLE ANNUAL_BUDGET(
department_ID number NOT NULL,
amount decimal(10,2) NOT NULL,
CONSTRAINT fk_department_ID_BDGT FOREIGN KEY(department_ID)
REFERENCES ADMIN.DEPARTMENT(department_ID)
);
INSERT INTO PERSON(LASTNAME, FIRSTNAME) VALUES('MAHESHWARI','HEMANT');
INSERT INTO PERSON(LASTNAME, FIRSTNAME) VALUES('MURPHY','TIM');
INSERT INTO ADMIN.DEPARTMENT (
DEPARTMENT_NAME,
DESCRIPTION,
DEPARTMENT_HEAD
) VALUES (
'IT',
'INFORMATION TECHNOLOGY',
1
);
INSERT INTO ADMIN.EMPLOYEE (
USER_ID,
DEPARTMENT_ID
) VALUES (
2,
3
);
INSERT INTO ADMIN.EMPLOYEE (
USER_ID,

DEPARTMENT_ID
) VALUES (
1,
3
);
INSERT INTO ADMIN.PERSON (
LASTNAME,
FIRSTNAME
) VALUES (
'BENOIT',
'LOUIS'
);
INSERT INTO ADMIN.CUSTOMER (
USER_ID
) VALUES (
3
);
INSERT INTO ADMIN.ANNUAL_BUDGET (
DEPARTMENT_ID,
AMOUNT
) VALUES (
3,
100000.00
);
INSERT INTO ADMIN.EMPLOYEE_PAY (
EMPLOYEE_ID,
HOURLY_PAY_RATE
) VALUES (
2,
20
);
INSERT INTO ADMIN.EMPLOYEE_PAY (
EMPLOYEE_ID,
HOURLY_PAY_RATE
) VALUES (
1,
100
);
INSERT INTO ADMIN.INSURANCE (
EMPLOYEE_ID,
INSURANCE_NAME,
INSURANCE_DESCRIPTION
) VALUES (
1,
'CIGNA',
'FULL HEALTH INSURANCE'
);

INSERT INTO ADMIN.INSURANCE (

EMPLOYEE_ID,
INSURANCE_NAME,
INSURANCE_DESCRIPTION
) VALUES (
2,
'BLUECROSS',
'DENTAL INSURANCE'
);
INSERT INTO ADMIN.VENDOR (
VENDOR_NAME
) VALUES (
'NIKE'
);
INSERT INTO ADMIN.VENDOR (
VENDOR_NAME
) VALUES (
'APPLE'
);
INSERT INTO ADMIN.WAREHOUSE (
LOCATION
) VALUES (
'NEW YORK');
INSERT INTO ADMIN.WAREHOUSE_PRODUCT (
WAREHOUSE_ID,
QUANTITY
) VALUES (
1,
5
);
INSERT INTO ADMIN.WAREHOUSE_PRODUCT (
WAREHOUSE_ID,
QUANTITY
) VALUES (
1,
3
);
INSERT INTO ADMIN.PRODUCT (
PRODUCT_NAME,
PRODUCT_DESCRIPTION,
PRICE_PER_UNIT,
VENDOR_ID,
VENDOR_PRICE,
WAREHOUSE_PRODUCT_ID
) VALUES (
'RUNNER',
'RUNNING SHOES',
200.00,
1,
150.00,
1
);

INSERT INTO ADMIN.PRODUCT (
PRODUCT_NAME,
PRODUCT_DESCRIPTION,
PRICE_PER_UNIT,
VENDOR_ID,
VENDOR_PRICE,
WAREHOUSE_PRODUCT_ID
) VALUES (
'MACBOOK',
'MACBOOK LAPTOP',
2900.00,
2,
2800.00,
2
);
INSERT INTO ADMIN.ITEM_TYPE (
ITEM_TYPE_NAME
) VALUES (
'RENT'
);
INSERT INTO ADMIN.ITEM_TYPE (
ITEM_TYPE_NAME
) VALUES (
‘ELECTRICITY’
);

INSERT INTO ADMIN.ITEM (
ITEM_TYPE_ID,
ITEM_NAME,
ITEM_DESCRIPTION
) VALUES (
1,
'RENT FOR DECEMBER',
'TOTAL RENT AMOUNT FOR MONTH OF DECEMBER'
);

INSERT INTO ADMIN.ITEM (
ITEM_TYPE_ID,
ITEM_NAME,
ITEM_DESCRIPTION
) VALUES (
2,
'ELECTICITY FOR DECEMBER',
'TOTAL ELECTRIC BILL FOR MONTH OF DECEMBER'
);
INSERT INTO ADMIN.OPERATION_TRANSACTION (
DESCRIPTION,
DEPARTMENT_ID,
ITEM_ID,
COST
) VALUES (

'ELECTRICITY AMOUNT', 3, 2, 1000.00
);
INSERT INTO ADMIN.WAREHOUSE_COST (
WAREHOUSE_ID,
COST,
DAY_PLACED,
ITEM_ID
) VALUES (
1,
1500.00,
DATE '2020-12-01',
1
);
INSERT INTO ADMIN.SUPPLY (
SUPPLY_TYPE,
DEPARTMENT_ID,
SUPPLY_NAME,
QUANTITY,
PRICE_PER_UNIT
) VALUES (
'ELECTRONICS',
3,
'MONITOR',
50,
100.00
);
INSERT INTO ADMIN.SCHEDULE (
EMPLOYEE_ID,
DAY_WORKED,
START_TIME,
END_TIME
) VALUES (
1,
DATE '2020-12-01',
TIMESTAMP '2020-12-01 08:00:00.00',
TIMESTAMP '2020-12-01 17:00:00.00'
);
INSERT INTO ADMIN.SCHEDULE (
EMPLOYEE_ID,
DAY_WORKED,
START_TIME,
END_TIME
) VALUES (
1,
DATE '2020-12-02',
TIMESTAMP '2020-12-02 08:00:00.00',
TIMESTAMP '2020-12-02 17:00:00.00'
);
INSERT INTO ADMIN.SCHEDULE (
EMPLOYEE_ID,
DAY_WORKED,
START_TIME,

END_TIME
) VALUES (
2,
DATE '2020-12-02',
TIMESTAMP '2020-12-02 08:00:00.00',
TIMESTAMP '2020-12-02 16:00:00.00'
);
INSERT INTO ADMIN.ORDERS (
ORDER_DATE,
TRACKING_ID,
CUST_ID
) VALUES (
DATE '2020-12-01',
12345,
1
);
INSERT INTO ADMIN.ORDER_PRODUCT (
ORDER_ID,
QUANTITY,
PRODUCT_ID
) VALUES (
1,
1,
1
);
CREATE VIEW TOTAL_HOURS_WORKED AS
SELECT S.EMPLOYEE_ID, FIRSTNAME|| ' ' || LASTNAME AS NAME,
TO_CHAR(DAY_WORKED, 'MM-DD-YYYY') AS DATE_WORKED, EXTRACT(HOUR FROM
END_TIME - START_TIME) AS HOURS_WORKED, EXTRACT(MONTH FROM
DAY_WORKED) || '-' || EXTRACT(YEAR FROM DAY_WORKED) AS MONTH_WORKED
FROM
PERSON P, EMPLOYEE E, SCHEDULE S
WHERE
P.USER_ID = E.USER_ID AND
S.EMPLOYEE_ID = E.EMPLOYEE_ID;

CREATE VIEW MONTHLY_HOURS_WORKED AS SELECT EMPLOYEE_ID, NAME,
MONTH_WORKED, SUM(HOURS_WORKED) AS HOURS
FROM TOTAL_HOURS_WORKED
GROUP BY EMPLOYEE_ID, NAME, MONTH_WORKED;

CREATE OR REPLACE PROCEDURE MONTHLY_PAY(MONTH_AND_YEAR IN VARCHAR2,
EMP_ID IN NUMBER)
AS
TOTAL_PAY DECIMAL(8,2);
HOURS_WORKED NUMBER;
BASE_PAY DECIMAL(8,2);
BEGIN
SELECT HOURS INTO HOURS_WORKED FROM MONTHLY_HOURS_WORKED
WHERE EMPLOYEE_ID = EMP_ID;
SELECT HOURLY_PAY_RATE INTO BASE_PAY FROM EMPLOYEE_PAY
WHERE EMPLOYEE_ID = EMP_ID;

TOTAL_PAY := HOURS_WORKED * BASE_PAY;
DBMS_OUTPUT.PUT_LINE('TOTAL PAY FOR '|| MONTH_AND_YEAR ||' IS '||
TOTAL_PAY);
END;
CREATE OR REPLACE PROCEDURE DEPARTMENT_MONTHLY_SCHEDULE
(MONTH_AND_YEAR IN VARCHAR2, DEPARTMENT_ID IN NUMBER)
AS
DEPARTMENT_NAME VARCHAR2(100);
BEGIN
SELECT D.DEPARTMENT_NAME INTO DEPARTMENT_NAME FROM
DEPARTMENT D WHERE D.DEPARTMENT_ID = DEPARTMENT_ID;
DBMS_OUTPUT.PUT_LINE('SCHEDULE OF ALL THE EMPLOYEE WORKING IN '||
DEPARTMENT_NAME);
DBMS_OUTPUT.PUT_LINE('********************************************');
FOR RECORD IN(
SELECT P.FIRSTNAME, P.LASTNAME, E.EMPLOYEE_ID
FROM
PERSON P,
EMPLOYEE E
WHERE
E.DEPARTMENT_ID = DEPARTMENT_ID AND
P.USER_ID = E.USER_ID
)
LOOP
DBMS_OUTPUT.PUT_LINE('NAME: '|| RECORD.FIRSTNAME || ' ' ||
RECORD.LASTNAME);
DBMS_OUTPUT.PUT_LINE('================================');
FOR SCHEDULE IN(
SELECT DAY_WORKED, START_TIME, END_TIME
FROM
SCHEDULE S
WHERE
S.EMPLOYEE_ID = RECORD.EMPLOYEE_ID AND
EXTRACT(MONTH FROM DAY_WORKED) || '-' || EXTRACT(YEAR
FROM DAY_WORKED) = MONTH_AND_YEAR
)
LOOP
DBMS_OUTPUT.PUT_LINE('DATE: '|| SCHEDULE.DAY_WORKED);
DBMS_OUTPUT.PUT_LINE('START TIME: '|| SCHEDULE.START_TIME);
DBMS_OUTPUT.PUT_LINE('END TIME: '|| SCHEDULE.END_TIME);
DBMS_OUTPUT.PUT_LINE('-------------------------------');
END LOOP;
END LOOP;
END;

CREATE OR REPLACE PROCEDURE BILLS_FOR_CUSTOMER(CUSTOMER_ID IN
NUMBER)
AS
CUSTOMER_NAME VARCHAR2(100);
TOTAL_AMOUNT DECIMAL(8,2);
BEGIN
SELECT (P.FIRSTNAME|| ' ' || P.LASTNAME) INTO CUSTOMER_NAME
FROM
PERSON P,
CUSTOMER C

WHERE
P.USER_ID = C.USER_ID AND
C.CUST_ID = CUSTOMER_ID;
DBMS_OUTPUT.PUT_LINE(CUSTOMER_NAME);
DBMS_OUTPUT.PUT_LINE('****************************');
FOR RECORD IN(
SELECT ORDER_ID, ORDER_DATE, TRACKING_ID
FROM
ORDERS O
WHERE
O.CUST_ID = CUSTOMER_ID
)
LOOP
SELECT SUM(PRICE_PER_UNIT*QUANTITY) INTO TOTAL_AMOUNT
FROM
ORDER_PRODUCT OP,
PRODUCT P
WHERE
OP.ORDER_ID = RECORD.ORDER_ID AND
OP.PRODUCT_ID = P.PRODUCT_ID;
DBMS_OUTPUT.PUT_LINE('ORDER NUMBER: ' || RECORD.ORDER_ID);
DBMS_OUTPUT.PUT_LINE('ORDER DATE: ' || RECORD.ORDER_DATE);
DBMS_OUTPUT.PUT_LINE('ORDER TRACKING ID: ' || RECORD.TRACKING_ID);
DBMS_OUTPUT.PUT_LINE('ORDER TOTAL: ' || TOTAL_AMOUNT);
DBMS_OUTPUT.PUT_LINE('===================================');
FOR ITEM IN(
SELECT PRODUCT_NAME, PRICE_PER_UNIT, QUANTITY,
PRICE_PER_UNIT*QUANTITY AS TOTAL_COST
FROM
ORDER_PRODUCT OP,
PRODUCT P
WHERE
OP.ORDER_ID = RECORD.ORDER_ID AND
OP.PRODUCT_ID = P.PRODUCT_ID
)
LOOP
DBMS_OUTPUT.PUT_LINE(ITEM.PRODUCT_NAME||' '||ITEM.PRICE_PER_UNIT||'
'||ITEM.QUANTITY||' '||ITEM.TOTAL_COST);
DBMS_OUTPUT.PUT_LINE('-------------------------------------');
END LOOP;
END LOOP;
END;

Create or replace trigger delete_item_type before delete on item_type for each row
declare itm_id number;
Begin
select item_id into itm_id from item where item_type_id =:old.item_type_id;
delete from warehouse_cost where item_id = itm_id;
delete from item where item_type_id = :old.item_type_id;
End;
Create or replace trigger delete_order before delete on orders for each row
Begin

delete from order_product where order_id = :old.order_id;
End;
Create or replace trigger delete_employee before delete on employee for each row
Begin
delete from employee_pay where employee_id = :old.employee_id;
delete from insurance where employee_id = :old.employee_id;
delete from schedule where employee_id = :old.employee_id;
End;
SET TRANSACTION NAME 'ADD_EMPLOYEE';
DECLARE
USR_ID NUMBER;
EMP_ID NUMBER;
BEGIN
INSERT INTO ADMIN.PERSON (
LASTNAME,
FIRSTNAME
) VALUES (
'MURPHY',
'STEVE'
);
SELECT MAX(USER_ID) INTO USR_ID FROM PERSON;
SAVEPOINT PERSON_SAVED;
INSERT INTO ADMIN.EMPLOYEE (
USER_ID,
DEPARTMENT_ID
) VALUES (
USR_ID,
3
);
SELECT MAX(EMPLOYEE_ID) INTO EMP_ID FROM EMPLOYEE;
SAVEPOINT EMPLOYEE_SAVED;
INSERT INTO ADMIN.EMPLOYEE_PAY (
EMPLOYEE_ID,
HOURLY_PAY_RATE
) VALUES (
EMP_ID,
50
);
COMMIT;
END;
CREATE OR REPLACE PROCEDURE BUDGET_CALCULATION
AS
AMOUNT_LEFT NUMBER(8,2);

TOTAL_PAYS NUMBER(8,2);
BEGIN
TOTAL_PAYS:= 0;
DBMS_OUTPUT.PUT_LINE('TOTAL BUDGET CALCULATION');
DBMS_OUTPUT.PUT_LINE('********************************************');
FOR RECORD IN(
SELECT
A.DEPARTMENT_ID, AMOUNT, DEPARTMENT_NAME
FROM
ANNUAL_BUDGET A, DEPARTMENT D
WHERE
A.DEPARTMENT_ID = D.DEPARTMENT_ID
)
LOOP
DBMS_OUTPUT.PUT_LINE('DEPARTMENT ID:'|| RECORD.DEPARTMENT_ID);
DBMS_OUTPUT.PUT_LINE('DEPARTMENT NAME:'|| RECORD.DEPARTMENT_NAME);
DBMS_OUTPUT.PUT_LINE('BUDGET AMOUNT:'|| RECORD.AMOUNT);
DBMS_OUTPUT.PUT_LINE('********************************************');
FOR EMP IN(
SELECT NAME, EMPLOYEE_ID, TOTAL_SALARY FROM
TOTAL_ANNUAL_PAY
)
LOOP
DBMS_OUTPUT.PUT_LINE('EMPLOYEE ID:'|| EMP.EMPLOYEE_ID);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME:'|| EMP.NAME);
DBMS_OUTPUT.PUT_LINE('TOTAL PAY:'|| EMP.TOTAL_SALARY);
DBMS_OUTPUT.PUT_LINE('********************************************');
TOTAL_PAYS:= EMP.TOTAL_SALARY + TOTAL_PAYS;
END LOOP;
AMOUNT_LEFT:= RECORD.AMOUNT - TOTAL_PAYS;
DBMS_OUTPUT.PUT_LINE('TOTAL BUDGET LEFT: '||AMOUNT_LEFT);
END LOOP;
END;
